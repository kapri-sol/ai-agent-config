{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "CLI 프레임워크 및 기본 설정 시스템 구축",
        "description": "TypeScript 기반 CLI 프레임워크를 구축하고 전역 설정 시스템을 구현합니다.",
        "details": "Commander.js를 사용하여 CLI 인터페이스를 구축하고, YAML/JSON 기반 설정 파일 시스템을 구현합니다. ~/.config/aisync/config.yml 구조를 정의하고, 환경별 오버라이드 기능을 포함합니다. TypeScript 타입 정의와 설정 검증 로직을 구현합니다.",
        "testStrategy": "CLI 명령어 파싱 테스트, 설정 파일 로딩/저장 테스트, 환경별 오버라이드 동작 검증",
        "priority": "high",
        "dependencies": [],
        "status": "in-progress",
        "subtasks": [
          {
            "id": 1,
            "title": "Commander.js 기반 CLI 구조 설정 및 프로젝트 초기화",
            "description": "TypeScript 프로젝트 초기화, Commander.js 설치 및 기본 CLI 명령어 구조를 설정합니다.",
            "dependencies": [],
            "details": "npm 프로젝트 초기화, TypeScript/Commander.js 의존성 설치, tsconfig.json 설정, 기본 CLI 엔트리포인트 작성, 핵심 명령어(init, sync, status) 스켈레톤 구현, 빌드 스크립트 설정을 포함합니다.\n<info added on 2025-07-23T12:48:57.690Z>\n완료된 구현 사항:\n\n**프로젝트 초기화 및 의존성**\n- npm 프로젝트 초기화 완료\n- TypeScript, Commander.js, @types/node, ts-node 의존성 설치 완료\n- tsconfig.json 설정 완료 (ES2020 타겟, commonjs 모듈, strict 모드 활성화)\n\n**CLI 구조 및 엔트리포인트**\n- src/index.ts 메인 CLI 엔트리포인트 구현 완료\n- src/commands/ 디렉토리 구조 생성\n- init, sync, status 명령어 스켈레톤 구현 완료\n\n**빌드 시스템 및 실행 환경**\n- package.json에 build, start, dev 스크립트 설정 완료\n- bin 필드 추가로 글로벌 CLI 명령어 등록\n- CLI 빌드 및 동작 테스트 완료\n\n**구현된 명령어 기능**\n- agent-config --help: CLI 도움말 표시 기능 구현\n- agent-config init: 에이전트 설정 초기화 명령어 스켈레톤\n- agent-config sync: 원격 소스와 동기화 명령어 스켈레톤\n- agent-config status: 현재 상태 표시 명령어 스켈레톤\n\n**검증된 빌드 프로세스**\n- npm run build: TypeScript 컴파일 프로세스 검증\n- npm run dev: 개발 모드 실행 환경 확인\n- npm run start: 빌드된 버전 실행 테스트 완료\n</info added on 2025-07-23T12:48:57.690Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "TypeScript 타입 정의 및 프로젝트 구조 설계",
            "description": "설정 시스템의 핵심 타입 정의와 모듈화된 프로젝트 구조를 구축합니다.",
            "dependencies": [],
            "details": "ConfigSchema, EnvironmentConfig, ValidationResult 등 핵심 인터페이스 정의, src/types/, src/config/, src/utils/ 디렉토리 구조 설계, 모듈 export/import 체계 구축, 타입 안전성을 보장하는 유틸리티 함수 구현을 포함합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "YAML/JSON 설정 파일 시스템 구현",
            "description": "YAML과 JSON 형식의 설정 파일을 읽고 쓰는 핵심 시스템을 구현합니다.",
            "dependencies": [],
            "details": "js-yaml, fs-extra 라이브러리 활용, ~/.config/aisync/config.yml 경로 관리, 설정 파일 읽기/쓰기/병합 함수 구현, 기본 설정 템플릿 생성, 설정 파일 백업 및 복원 기능을 포함합니다.\n<info added on 2025-07-24T12:59:46.924Z>\n**구현 완료 상태:**\nFileConfigManager와 ConfigManager가 성공적으로 통합되어 YAML/JSON 이중 지원 체계가 완성되었습니다. CLI 명령어에 --format 플래그가 추가되어 형식 선택이 가능하며, 기존 JSON 설정과의 하위 호환성이 유지됩니다. 설정 병합 우선순위(로컬 > 전역 > 기본값)가 적용되고, 자동 백업/복원 시스템이 작동합니다. 템플릿 시스템(default, claude, enterprise)과 자동 형식 감지 기능이 구현되었습니다. init 및 status 명령어가 다중 설정 파일을 지원하도록 업데이트되고, 모든 기존 CLI 기능과의 호환성이 확인되었습니다. 전체 테스트 22개가 통과하여 품질이 검증되었으며, TypeScript 빌드 오류 없이 완료되었습니다.\n</info added on 2025-07-24T12:59:46.924Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "환경별 오버라이드 로직 구현",
            "description": "개발/스테이징/프로덕션 환경에 따른 설정 오버라이드 메커니즘을 구현합니다.",
            "dependencies": [],
            "details": "환경 변수 감지 로직, 환경별 설정 파일 우선순위 정의 (config.local.yml > config.dev.yml > config.yml), 설정 병합 알고리즘 구현, 환경별 설정 검증, 오버라이드 상태 시각화 기능을 포함합니다.",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "설정 검증 및 에러 핸들링 시스템",
            "description": "설정 파일의 유효성 검사와 포괄적인 에러 처리 시스템을 구현합니다.",
            "dependencies": [],
            "details": "JSON Schema 기반 설정 검증, 필수 필드 검사, 타입 호환성 검증, 상세한 에러 메시지 생성, 설정 수정 제안 기능, 검증 결과 로깅, 복구 가능한 에러에 대한 자동 수정 기능을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 2,
        "title": "GitHub API 클라이언트 모듈 구현",
        "description": "Octokit.js를 사용하여 GitHub Repository와 연동하는 클라이언트 모듈을 구현합니다.",
        "details": "GitHub API 인증 (token 방식), 파일 다운로드, 변경사항 감지 기능을 구현합니다. Repository 구조 검증, 브랜치/태그 지원, 오류 처리 및 재시도 로직을 포함합니다. Rate limiting 처리와 캐싱 메커니즘을 구현합니다.",
        "testStrategy": "GitHub API 연결 테스트, 파일 다운로드 검증, 인증 실패 처리 테스트, Rate limit 처리 검증",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "플러그인 인터페이스 및 아키텍처 설계",
        "description": "AI 도구별 플러그인을 위한 인터페이스와 동적 로딩 시스템을 구현합니다.",
        "details": "AIToolPlugin 인터페이스를 TypeScript로 정의하고, 플러그인 디스커버리, 동적 로딩, 버전 관리 기능을 구현합니다. 플러그인 레지스트리 시스템과 의존성 관리, 보안 검증 메커니즘을 포함합니다.",
        "testStrategy": "플러그인 로딩 테스트, 인터페이스 호환성 검증, 동적 로딩 오류 처리 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Claude Code 플러그인 개발",
        "description": "Claude Code 설정 파일 동기화를 위한 첫 번째 플러그인을 구현합니다.",
        "details": "~/.config/claude/ 경로의 config.json 파일 처리, JSON 스키마 검증, 백업/복원 기능을 구현합니다. 프롬프트 템플릿 파일 관리와 설정 적용 전 유효성 검사를 포함합니다. 플러그인 패키지 구조와 NPM 배포 준비를 완료합니다.",
        "testStrategy": "Claude Code 설정 파일 검증 테스트, 백업/복원 기능 테스트, 설정 적용 후 도구 정상 동작 확인",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "파일 시스템 조작 및 백업 시스템 구현",
        "description": "안전한 파일 조작과 자동 백업/복원 시스템을 구현합니다.",
        "details": "원자적 파일 쓰기, 디렉토리 생성, 권한 관리 기능을 구현합니다. 타임스탬프 기반 백업 시스템, 백업 정리 정책, 복원 시 충돌 해결 로직을 포함합니다. 크로스 플랫폼 호환성을 보장합니다.",
        "testStrategy": "파일 조작 원자성 테스트, 백업 파일 무결성 검증, 복원 시나리오 테스트",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "수동 동기화 엔진 구현",
        "description": "사용자가 명령어로 실행하는 수동 동기화 핵심 로직을 구현합니다.",
        "details": "aisync pull, aisync status 명령어를 구현하고, GitHub에서 설정 파일을 다운로드하여 로컬에 적용하는 워크플로우를 구현합니다. 충돌 감지, 사용자 확인 프롬프트, 롤백 기능을 포함합니다.",
        "testStrategy": "전체 동기화 워크플로우 테스트, 충돌 시나리오 처리 검증, 롤백 기능 테스트",
        "priority": "high",
        "dependencies": [
          2,
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "설정 검증 프레임워크 구현",
        "description": "도구별 설정 파일의 유효성을 검사하는 검증 시스템을 구현합니다.",
        "details": "JSON Schema, YAML 스키마 기반 검증 엔진을 구현하고, 도구별 커스텀 검증 로직을 지원합니다. 검증 결과 리포팅, 경고/오류 분류, 수정 제안 기능을 포함합니다.",
        "testStrategy": "다양한 설정 파일 형식 검증 테스트, 잘못된 설정 감지 테스트, 검증 결과 정확성 확인",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "상태 추적 및 이력 관리 시스템",
        "description": "동기화 상태와 이력을 추적하는 시스템을 구현합니다.",
        "details": "SQLite 기반 로컬 데이터베이스로 동기화 이력, 상태 변경, 충돌 해결 기록을 관리합니다. aisync status 명령어로 현재 상태를 표시하고, 이력 조회 기능을 제공합니다.",
        "testStrategy": "상태 변경 추적 테스트, 이력 데이터 무결성 검증, 상태 표시 UI 테스트",
        "priority": "medium",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "오류 처리 및 복구 시스템",
        "description": "동기화 실패 상황에 대한 오류 처리와 복구 메커니즘을 구현합니다.",
        "details": "네트워크 오류, 파일 권한 오류, 설정 파일 손상 등 다양한 실패 시나리오에 대한 복구 로직을 구현합니다. 자동 재시도, 부분 복구, 사용자 개입 요청 기능을 포함합니다.",
        "testStrategy": "다양한 오류 시나리오 시뮬레이션, 복구 로직 검증, 사용자 알림 메커니즘 테스트",
        "priority": "medium",
        "dependencies": [
          6,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "MVP 통합 테스트 및 문서화",
        "description": "Claude Code 지원 MVP의 통합 테스트와 사용자 문서를 작성합니다.",
        "details": "전체 워크플로우 End-to-End 테스트, 성능 벤치마크, 사용자 가이드 작성을 수행합니다. 설치 스크립트, CLI 도움말, 트러블슈팅 가이드를 포함합니다. NPM 패키지 배포 준비를 완료합니다.",
        "testStrategy": "전체 사용자 시나리오 테스트, 성능 요구사항 검증, 문서 정확성 확인, 설치 프로세스 검증",
        "priority": "high",
        "dependencies": [
          6,
          7,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-23T12:24:38.370Z",
      "updated": "2025-07-24T13:31:45.160Z",
      "description": "Tasks for master context"
    }
  }
}