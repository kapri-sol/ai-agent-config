import { promises as fs } from 'fs';
import { join } from 'path';
import { AgentConfig, ConfigStatus, TemplateConfig } from '../types/config';

const CONFIG_FILE = 'agent.config.json';
const PROMPTS_FILE = 'prompts.yaml';

export class ConfigManager {
  private configPath: string;
  private promptsPath: string;

  constructor(baseDir: string = process.cwd()) {
    this.configPath = join(baseDir, CONFIG_FILE);
    this.promptsPath = join(baseDir, PROMPTS_FILE);
  }

  async exists(): Promise<boolean> {
    try {
      await fs.access(this.configPath);
      return true;
    } catch {
      return false;
    }
  }

  async load(): Promise<AgentConfig> {
    try {
      const content = await fs.readFile(this.configPath, 'utf-8');
      return JSON.parse(content);
    } catch (error) {
      throw new Error(`Failed to load configuration: ${error}`);
    }
  }

  async save(config: AgentConfig): Promise<void> {
    try {
      await fs.writeFile(this.configPath, JSON.stringify(config, null, 2));
    } catch (error) {
      throw new Error(`Failed to save configuration: ${error}`);
    }
  }

  async initialize(template: string = 'default', force: boolean = false): Promise<void> {
    if (!force && await this.exists()) {
      throw new Error('Configuration already exists. Use --force to overwrite.');
    }

    const templateConfig = this.getTemplate(template);
    const config: AgentConfig = {
      version: '1.0.0',
      initialized: true,
      templates: {
        [template]: templateConfig
      },
      sync: {
        autoSync: false
      },
      features: {
        autoComplete: true,
        validation: true,
        backup: false
      }
    };

    await this.save(config);
    await this.createPromptsFile(templateConfig);
  }

  async getStatus(): Promise<ConfigStatus> {
    const configExists = await this.exists();
    
    if (!configExists) {
      return {
        initialized: false,
        configFiles: [],
        version: '1.0.0',
        features: []
      };
    }

    const config = await this.load();
    const configFiles = [CONFIG_FILE];
    
    try {
      await fs.access(this.promptsPath);
      configFiles.push(PROMPTS_FILE);
    } catch {
      // Prompts file doesn't exist
    }

    return {
      initialized: config.initialized,
      configFiles,
      lastSync: config.sync.lastSync,
      version: config.version,
      template: Object.keys(config.templates)[0],
      features: Object.keys(config.features).filter(key => config.features[key])
    };
  }

  async updateSyncInfo(remote?: string): Promise<void> {
    const config = await this.load();
    config.sync.lastSync = new Date().toISOString();
    if (remote) {
      config.sync.remote = remote;
    }
    await this.save(config);
  }

  private getTemplate(templateName: string): TemplateConfig {
    const templates: { [key: string]: TemplateConfig } = {
      default: {
        name: 'Default Template',
        description: 'Basic agent configuration template',
        files: ['agent.config.json', 'prompts.yaml'],
        variables: {
          agentName: 'DefaultAgent',
          version: '1.0.0'
        }
      },
      advanced: {
        name: 'Advanced Template',
        description: 'Advanced agent configuration with multiple features',
        files: ['agent.config.json', 'prompts.yaml', 'workflows.yaml'],
        variables: {
          agentName: 'AdvancedAgent',
          version: '1.0.0',
          features: 'validation,backup,monitoring'
        }
      }
    };

    const template = templates[templateName];
    if (!template) {
      throw new Error(`Template '${templateName}' not found. Available templates: ${Object.keys(templates).join(', ')}`);
    }

    return template;
  }

  private async createPromptsFile(template: TemplateConfig): Promise<void> {
    const promptsContent = `# Agent Prompts Configuration
# Generated by agent-config CLI

system_prompt: |
  You are ${template.variables?.agentName || 'an AI agent'} configured for task automation.
  Version: ${template.variables?.version || '1.0.0'}

prompts:
  welcome: "Hello! I'm your configured AI agent."
  help: "Here are the available commands and features."
  
templates:
  task_completion: "Task completed successfully: {task_name}"
  error_handling: "An error occurred: {error_message}"
`;

    await fs.writeFile(this.promptsPath, promptsContent);
  }
}

export const validateInput = (input: string, type: 'url' | 'template' | 'path'): boolean => {
  switch (type) {
    case 'url':
      try {
        new URL(input);
        return true;
      } catch {
        return false;
      }
    case 'template':
      return /^[a-zA-Z0-9_-]+$/.test(input);
    case 'path':
      return input.length > 0 && !input.includes('..');
    default:
      return false;
  }
};